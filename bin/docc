#!/usr/bin/env python
# coding=utf-8

"""This script allows you to interact with Digital Ocean API via command line.
"""

from argparse import ArgumentParser
import sys

from docc.configuration import Configuration

from docc.credentials import Credentials
from docc.service import Service
from docc.droplet import Droplet, Status
from docc.size import Size
from docc.region import Region
from docc.image import Image
from docc.sshkey import SSHKey
from docc.exceptions import CredentialsError, APIError
from docc import __version__


def main():
    """Main function for the whole thing. Parse parameters and calls the
    appropriate command
    """

    print "Docc (%s) -- Digital Ocean Command Center\n" % __version__

    params = parse_arguments()
    try:
        if 'init' == params.command:
            init_command()
        elif 'list' == params.command:
            list_command(params)
        elif 'show' == params.command:
            show_command(params)
        elif 'destroy' == params.command:
            destroy_command(params)
        elif 'shutdown' == params.command:
            droplet_operation(params)
        elif 'power_off' == params.command:
            droplet_operation(params)
        elif 'power_on' == params.command:
            droplet_operation(params)
        elif 'power_cycle' == params.command:
            droplet_operation(params)
        elif 'reboot' == params.command:
            droplet_operation(params)
        elif 'password_reset' == params.command:
            droplet_operation(params)
        elif 'create' == params.command:
            create_command(params)
        elif 'edit' == params.command:
            edit_command(params)
        elif 'resize' == params.command:
            resize_command(params)
        elif 'snapshot' == params.command:
            snapshot_command(params)
        elif 'restore' == params.command:
            restore_command(params)
        elif 'rebuild' == params.command:
            rebuild_command(params)
        elif 'backups' == params.command:
            backups_command(params)
        else:
            raise Exception(
                "Unknown command line command: '%s'" % params.command)
    except CredentialsError as e:
        print "Error: %s." % e
    except APIError as e:
        print "Error: %s." % e


class MyArgumentParser(ArgumentParser):
    def error(self, message):
        self.print_help(sys.stderr)
        print >> sys.stderr
        self.exit(2, '%s: error: %s\n' % (self.prog, message))


def parse_arguments():
    """Parses the command line parameters"""

    # Create the top-level parser
    main_parser = MyArgumentParser(
        description="This script lets you interact with Digital Ocean "
                    "droplets and associated objects.",
    )
    command_parsers = main_parser.add_subparsers(
        description="Valid commands",
        help='description',
        dest='command',
        metavar='<command>'
    )

    # Create a parser for the 'init' command
    command_parsers.add_parser(
        'init', help='a configuration file with credentials'
    )

    # Create a parser for the 'list' command
    parser_list = command_parsers.add_parser(
        'list',
        help='droplets, keys, regions, images, or sizes'
    )
    list_command_parsers = parser_list.add_subparsers(
        dest='type',
        metavar='<object type>'
    )
    for object_type, description in [
        ('droplets', 'droplets'),
        ('regions', 'regions'),
        ('sizes', 'sizes'),
        ('images', 'all images'),
        ('my_images', 'my images'),
        ('global_images', 'global images'),
        ('keys', 'SSH keys')
    ]:
        list_command_parsers.add_parser(
            object_type,
            help="list %s" % description,
        )

    # Create a parser for the 'show' command
    parser_show = command_parsers.add_parser(
        'show',
        help='details for droplets, or SSH keys'
    )
    show_command_parsers = parser_show.add_subparsers(
        dest='type'
    )
    for object_type, description in [
        ('key', 'keys'),
        ('droplet', 'droplets'),
    ]:
        local_parser = show_command_parsers.add_parser(
            object_type,
            help='show %s details given list of identifiers' % description
        )
        local_parser.add_argument('ids', metavar='ID', type=int, nargs="+")

    # Create a parser for the 'create' command
    parser_create = command_parsers.add_parser(
        'create',
        help='a new droplet, or a new SSH key'
    )
    create_command_parsers = parser_create.add_subparsers(
        dest='type'
    )

    create_droplet_parser = create_command_parsers.add_parser(
        'droplet',
        help='create a new droplet'
    )
    create_droplet_parser.add_argument(
        'name',
        metavar='NAME',
        type=str,
        nargs=1,
        help="of the new droplet"
    )
    create_droplet_parser.add_argument(
        'size',
        metavar='SIZE_ID',
        type=int,
        nargs=1,
        help="for the size you want to use. See 'list sizes'"
    )
    create_droplet_parser.add_argument(
        'image',
        metavar='IMAGE_ID',
        type=int,
        nargs=1,
        help="for the image you want to use. See 'list images'"
    )
    create_droplet_parser.add_argument(
        'region',
        metavar='REGION_ID',
        type=int,
        nargs=1,
        help="where the droplet will be stored. See 'list regions'"
    )
    create_droplet_parser.add_argument(
        'keys',
        metavar='KEY_ID',
        type=int,
        nargs="*",
        help="zero or more SSH keys. See 'list keys'"
    )

    create_key_parser = create_command_parsers.add_parser(
        'key',
        help='create a new SSH key'
    )
    create_key_parser.add_argument(
        'name',
        metavar='NAME',
        type=str,
        help="of the new key"
    )
    create_key_parser.add_argument(
        'public',
        metavar='PUBLIC_KEY',
        type=str,
        help='The public key (make sure to use quotes if it contain spaces)'
    )

    # Parsers for different operations on droplets
    for (operation, description) in [
        ('shutdown', "shutdown"),
        ('power_cycle', "power off and then on"),
        ('power_off', "power off"),
        ('power_on', "power on"),
        ('reboot', "reboot"),
        ('password_reset', "reset root password for"),
    ]:
        local_parser = command_parsers.add_parser(
            operation,
            help='one or more droplets'
        )
        local_parser.add_argument(
            'ids',
            metavar='ID',
            type=int,
            nargs='+',
            help="for one or more droplets you want to %s" % description
        )

    # Create a parser for the 'resize' command
    parser_resize = command_parsers.add_parser(
        'resize',
        help='a given droplet'
    )
    parser_resize.add_argument(
        'id',
        metavar='ID',
        type=int,
        help="The identifier for the droplet you want to resize')")
    parser_resize.add_argument(
        'size',
        metavar='SIZE',
        type=int,
        help="for the size you want to use. See 'list sizes'"
    )

    # Create a parser to 'snapshot' a given droplet
    parser_snapshot = command_parsers.add_parser(
        'snapshot',
        help='a given droplet'
    )
    parser_snapshot.add_argument(
        'id',
        metavar='ID',
        type=int,
        help='The identifier for the droplet you want to snapshot')
    parser_snapshot.add_argument(
        'name',
        metavar='NAME',
        type=str,
        nargs="?",
        help="the optional name for this snapshot")


    # Create a parser for the 'restore' command
    parser_restore = command_parsers.add_parser(
        'restore',
        help='a droplet with the given snapshot'
    )
    parser_restore.add_argument(
        'id',
        metavar='ID',
        type=int,
        help='The identifier for the droplet you want to restore'
    )
    parser_restore.add_argument(
        'image',
        metavar='MY_IMAGE',
        type=int,
        help="for the image you want to use. See 'list my_images'"
    )

    # Create a parser for the 'rebuild' command
    parser_rebuild = command_parsers.add_parser(
        'rebuild',
        help='a droplet with the given default image'
    )
    parser_rebuild.add_argument(
        'id',
        metavar='ID',
        type=int,
        help='The identifier for the droplet you want to rebuild'
    )
    parser_rebuild.add_argument(
        'image',
        metavar='IMAGE',
        type=int,
        help="for the image you want to use. See 'list images'"
    )

    # Create a parser to change 'backup' status on a given droplet
    parser_backups = command_parsers.add_parser(
        'backups',
        help='change backups status on a given droplet'
    )
    parser_backups.add_argument(
        'id',
        metavar='ID',
        type=int,
        help='The identifier for the droplet you want to backup or not')
    parser_backups.add_argument(
        'state',
        metavar='STATE',
        type=str,
        choices=['on', 'off'],
        help="Either 'on' or 'off'"
    )

    # Create a parser to 'edit' objects (ssh keys for now).
    parser_edit = command_parsers.add_parser(
        'edit',
        help='existing SSH keys'
    )
    edit_command_parsers = parser_edit.add_subparsers(
        dest='type'
    )
    edit_key_parser = edit_command_parsers.add_parser(
        'key',
        help='edit an existing SSH key'
    )
    edit_key_parser.add_argument(
        'id',
        metavar='ID',
        type=int,
        help="for the key you want to edit. See 'list keys'"
    )
    edit_key_parser.add_argument(
        'public',
        metavar='PUBLIC_KEY',
        type=str,
        help='The public key (make sure to use quotes if it contain spaces)'
    )


    # Create a parser for the 'destroy' command
    parser_destroy = command_parsers.add_parser(
        'destroy',
        help='droplets, images, or SSH keys'
    )
    destroy_command_parsers = parser_destroy.add_subparsers(
        dest='type'
    )
    for object_type, description in [
        ('droplet', 'droplets'),
        ('image', 'images'),
        ('key', 'keys')
    ]:
        local_parser = destroy_command_parsers.add_parser(
            object_type,
            help='destroy %s given list of identifiers' % description
        )
        local_parser.add_argument(
            'ids',
            metavar='ID',
            type=int,
            nargs="+",
            help="for the %s you want to destroy" % description
        )

    return main_parser.parse_args()


def get_service():
    """Return a valid service

    Return a valid service initialized with credentials contained in the
    configuration file.
    """
    try:
        config = Configuration()
        credentials = Credentials(config['client_id'], config['api_key'])
        return Service(credentials)
    except KeyError:
        print "Unable to retrieve credentials. Did you use 'init' command?"
        sys.exit(1)


def init_command():
    """Process the 'init' command that let user set credentials
    """
    configuration = Configuration()
    print "Retrieve 'Client Key' and 'API Key' from " \
          "https://www.digitalocean.com/api_access\n" \
          "and enter them below. They will be stored in " \
          "%s\n" % configuration._location
    client_id = raw_input("Client Key: ")
    api_key = raw_input("API Key: ")

    # Verify configuration
    credentials = Credentials(client_id, api_key)
    service = Service(credentials)
    try:
        service.get('droplets')
        configuration['client_id'] = client_id
        configuration['api_key'] = api_key
    except APIError:
        print "\nUnable to connect to Digital Ocean with those credentials."
        print "Those credentials will not be stored."
        sys.exit(1)


def list_command(parameters):
    """Process the 'list' command that let users list different objects

    :param parameters: parameters.type should contain the name of
    the object you want to list.
    """
    service = get_service()

    def list_objects(p):
        """List all the objects

        :param p: is a tuple contained a function returning all objects and
         a title displayed before the list
        """
        (my_callable, title) = p

        print title + ":"
        objects = my_callable(service)
        if not objects:
            print "  None found"
        for one_object in objects:
            print "  - %s" % one_object

    list_objects(
        {
            'droplets': (Droplet.droplets, "Droplets"),
            'sizes': (Size.sizes, "Sizes"),
            'regions': (Region.regions, "Regions"),
            'keys': (SSHKey.keys, "SSH Keys"),
            'images': (Image.images, "All Images"),
            'my_images': (Image.my_images, "My Images"),
            'global_images': (Image.global_images, "Global Images"),
        }[parameters.type]
    )


def show_command(parameters):
    service = get_service()
    identifiers = parameters.ids

    def show_object(my_callable):
        for identifier in identifiers:
            my_object = my_callable.get(service, identifier)
            print my_object
            for line in my_object.details().split('\n'):
                print "  %s" % line

    show_object(
        {
            'key': SSHKey,
            'droplet': Droplet,
        }[parameters.type]
    )


def droplet_operation(parameters):
    service = get_service()
    operation = parameters.command
    for droplet_id in parameters.ids:
        droplet = Droplet.get(service, droplet_id)
        method_to_call = getattr(droplet, operation)
        result = method_to_call(service)
        if result:
            print "'%s' operation on droplet %s was successful" % \
                  (operation, droplet_id)
        else:
            print "'%s' operation on droplet %s failed" % \
                  (operation, droplet_id)


def backups_command(parameters):
    service = get_service()
    droplet_id = parameters.id
    backup_state = parameters.state
    droplet = Droplet.get(service, droplet_id)
    if droplet.set_backups(service, backup_state):
        print "Droplet %s backups are now %s" % (droplet_id, backup_state)
    else:
        print "Failed to set backups flag on droplet %s" % droplet_id


def destroy_command(parameters):
    """
        Process the 'destroy' command for different objects and identifiers
    :param parameters: TODO
    """
    service = get_service()
    identifiers = parameters.ids

    def destroy_objects(p):
        """retrieve object for each identifier and destroys it"""
        (my_callable, title) = p
        for i in identifiers:
            my_object = my_callable.get(service, i)
            result = my_object.destroy(service)
            if result:
                print "%s %s destroyed" % \
                      (title, i)
            else:
                print "%s %s NOT destroyed" % \
                      (title, i)

    destroy_objects(
        {
            'droplet': (Droplet, "Droplet"),
            'image': (Image, "Image"),
            'key': ( SSHKey, "SSH Key"),
        }[parameters.type]
    )


def create_droplet(parameters):
    print parameters
    name = parameters.name[0]
    size_id = parameters.size[0]
    region_id = parameters.region[0]
    image_id = parameters.image[0]
    keys = parameters.keys

    service = get_service()
    print Droplet.create(
        service=service,
        name=name,
        size_id=size_id,
        image_id=image_id,
        region_id=region_id,
        keys=keys
    )


def create_key(parameters):
    service = get_service()
    print SSHKey.create(
        service=service,
        name=parameters.name,
        public=parameters.public
    )


def create_command(parameters):
    if parameters.type == 'droplet':
        create_droplet(parameters)
    elif parameters.type == 'key':
        create_key(parameters)


def edit_key(parameters):
    service = get_service()
    key_id = parameters.id
    public = parameters.public
    key = SSHKey.get(service, key_id)
    if key.edit(service, public):
        print "Editing of key %s was successful" % key_id
    else:
        print "Editing of key %s failed" % key_id


def edit_command(parameters):
    if parameters.type == 'key':
        edit_key(parameters)


def resize_command(parameters):
    droplet_id = parameters.id
    size_id = parameters.size
    service = get_service()
    droplet = Droplet.get(service, droplet_id)
    if size_id == droplet.size.id:
        print "Droplet %s is already using size %s" % (droplet_id, size_id)
        return
    size = Size.get(service, size_id)
    if size is None:
        print "Unknown size: %s. Use 'list sizes' for more information" % \
              size_id
        return

    if droplet.resize(service, size_id):
        print "Resize of droplet %s was successful" % droplet_id
    else:
        print "Resize of droplet %s failed" % droplet_id


def snapshot_command(parameters):
    droplet_id = parameters.id
    name = parameters.name
    service = get_service()
    droplet = Droplet.get(service, droplet_id)
    if droplet.status != Status.OFF:
        print "Droplet %s is not OFF. Consider using 'shutdown'"
        return
    if droplet.snapshot(service, name):
        print "Droplet %s snapshot was successful" % droplet_id
    else:
        print "Droplet %s snapshot failed" % droplet_id


def restore_command(parameters):
    droplet_id = parameters.id
    image_id = parameters.image
    service = get_service()
    droplet = Droplet.get(service, droplet_id)
    #if droplet.status != Status.OFF:
    #    print "Droplet %s is not OFF. Consider using 'shutdown'"
    #    return

    # Check if the image exists
    Image.get(service, image_id)

    if droplet.restore(service, image_id):
        print "Droplet %s restore was successful" % droplet_id
    else:
        print "Droplet %s restore failed" % droplet_id


def rebuild_command(parameters):
    droplet_id = parameters.id
    image_id = parameters.image
    service = get_service()
    droplet = Droplet.get(service, droplet_id)
    #if droplet.status != Status.OFF:
    #    print "Droplet %s is not OFF. Consider using 'shutdown'"
    #    return

    # Check if the image exists
    Image.get(service, image_id)

    if droplet.rebuild(service, image_id):
        print "Droplet %s rebuild was successful" % droplet_id
    else:
        print "Droplet %s rebuild failed" % droplet_id


if __name__ == "__main__":
    main()

